* Syntax in Functions

The pattern matching in Haskell is in a whole new level and fucking crazy...

#+begin_src haskell
lucky :: (Integral a) => a -> String
lucky 7 = "LUCKY NUMBER SEVEN!"
lucky x = "Sorry, you're out of luck, pal!"
#+end_src

The pattern matching does not include the keyword "break", and will /always exit after executing any one of the branches/. *The recommanded practice of writing cases from specific to general in LISP becomes mandatory here*, because /it *sequentially* checks all patterns from the first to the last/. Besides, there should always be a "catch-all" pattern at the end of the matching. Without it, it is possible to terminate the program while running when it fails to do the pattern matching.

Another important use of pattern matching is with the list -

#+begin_src haskell
>> x:y:z:zs = [1,2,3,4,5,6,7]
>> x
  1
>> zs
  [4,5,6,7]
#+end_src

Note that if you want to bind to several variables (even if one of them is just =_= and doesn't actually bind at all), we have to surround them in parentheses.

#+begin_src haskell
length' []     = 0
length' (x:xs) = 1 + length' xs
#+end_src

There's also a thing called *=as= patterns*. Those are a handy way of /breaking/ something up according to a pattern and /binding/ it to names whilst still keeping a reference to the whole thing. You do that by putting a name and an =@= in front of a pattern. For instance, the pattern =xs@(x:y:ys)=. This pattern will match exactly the same thing as =x:y:ys= but you can easily get the whole list via =xs= instead of repeating yourself by typing out =x:y:ys= in the function body again.

/Whereas patterns are a way of making sure a value *conforms to some form* and *deconstructing* it, guards are a way of *testing* whether some property of a value (or several of them) are true or false/. That sounds a lot like an if statement and it's very similar. The thing is that guards are a lot more readable when you have several conditions and they play really nicely with patterns.

*Although guards look similar to pattern matching, but they are fundamentally different*. Every expression behind the guards will return a boolean result, which in turn dictate whether this branch will be executed. Furthermore, any condition within guards could use pattern matching to disassemble something, the result of the matching is either success or failed.

The names we define in the =where= section of a function are only visible to that function, so we don't have to worry about them polluting the namespace of other functions. /Notice that all the names are aligned at a single column/. (the indentation is matter for Haskell...) If we don't align them nice and proper, Haskell gets confused because then it doesn't know they're all part of the same block. /=where= bindings aren't shared across function bodies of different patterns/. If you want several patterns of one function to access some shared name, you have to define it globally. =where= bindings can also be nested. /It's a common idiom to make a function and define some helper function in its =where= clause and then to give those functions helper functions as well, each with its own =where= clause/.

(On one hand, it is a nature extension from the math formula - the abstractions are deconstructed step by step downwards. On the other hand, this might look pretty, but it also makes the nested helper functions hard to test. My rule of thumb is that unless it is obviously simple and correct, it is better to write it as a top-level function.)

Very similar to =where= bindings are =let= bindings. =where= bindings are a syntactic construct that let you bind to variables at the end of a function and the whole function can see them, including all the guards. =Let= bindings let you bind to variables anywhere and are expressions themselves, but are very local, so they don't span across guards. Just like any construct in Haskell that is used to bind values to names, let bindings can be used for pattern matching.

*The difference is that =let= bindings are expressions themselves, =where= bindings are just syntactic constructs*. That is, /for the sake of pattern matching, *let bindings cannot be used cross bars*, since they are expressions and are firely local in the scope/. Some people prefer =where= bindings because the names come after the function they're being used in. That way, /the function body is closer to its name and type declaration and to some that's more readable/.

Many imperative languages (C, C++, Java, etc.) have case syntax and if you've ever programmed in them, you probably know what it's about. It's about taking a variable and then executing blocks of code for specific values of that variable and then maybe including a catch-all block of code in case the variable has some value for which we didn't set up a case.

Haskell takes that concept and one-ups it. Like the name implies, =case= expressions are, well, expressions, much like =if else= expressions and =let= bindings. Not only can we evaluate expressions based on the possible cases of the value of a variable, we can also do pattern matching. Taking a variable, pattern matching it, evaluating pieces of code based on its value - /pattern matching on parameters in function definitions is actually just syntactic sugar for case expressions/. (Yes... it is a whole new level..)
