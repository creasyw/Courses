* Input and Output

Whereas in imperative languages you usually get things done by giving the computer a series of steps to execute, /functional programming is more of defining what stuff is/. /The only thing a function can do in Haskell is give us back some result based on the parameters we gave it/. If a function is called two times with the same parameters, it has to return the same result.

While functions being unable to change state is good because it helps us reason about our programs, there's one problem with that. (I guess it is the same reason that everything about the I/O operatin is weird...) Haskell actually has a really clever system for dealing with functions that have *side-effects* that neatly separates the part of our program that is /pure/ and the part of our program that is /impure/, which does all the dirty work like talking to the keyboard and the screen. With those two parts separated, we can still reason about our pure program and take advantage of all the things that /purity offers, like laziness, robustness and modularity/, while efficiently communicating with the outside world.

#+begin_src haskell
ghci> :t putStrLn
putStrLn :: String -> IO ()
ghci> :t putStrLn "hello, world"
putStrLn "hello, world" :: IO ()
#+end_src

An I/O action is something that, when performed, will carry out an action with a *side-effect* (that's usually either reading from the input or printing stuff to the screen) and will also contain some kind of return value inside it. Printing a string to the terminal doesn't really have any kind of meaningful return value, so a dummy value of =()= is used. An I/O action will be performed when we give it a name of =main= and then run our program.

If we're taking data out of an I/O action, we can only take it out when we're inside another I/O action. This is how Haskell manages to neatly separate the pure and impure parts of our code. =getLine= is in a sense impure because its result value is not guaranteed to be the same when performed twice. That's why it's sort of tainted with the =IO= type constructor and we can only get that data out in I/O code. And /because I/O code is tainted too, any computation that depends on tainted I/O data will have a tainted result/. If we want to deal with impure data, we have to do it in an impure environment. So the taint of impurity spreads around much like the undead scourge and *it's in our best interest to keep the I/O parts of our code as small as possible*.

#+begin_src haskell
main = do
    putStrLn "Hello, what's your name?"
    name <- getLine
    putStrLn ("Hey " ++ name ++ ", you rock!")
#+end_src

Remember, *to get the value out of an I/O action, you have to perform it inside another I/O action by binding it to a name with =<-=*. In the example above, =getLine= has a type of =IO String=, so =name= will have a type of =String=. You can think of an I/O action as a box with little feet that will go out into the real world and do something there (like write some graffiti on a wall) and maybe bring back some data. Once it's fetched that data for you, the only way to open the box and get the data inside it is to use the =<-= construct.

When I say tainted, I don't mean tainted in such a way that we can never use the result contained in an I/O action ever again in pure code. No, we temporarily un-taint the data inside an I/O action when we bind it to a name. When we do =name <- getLine=, =name= is just a normal string, because it represents what's inside the box.

/I/O actions will only be performed when they are given a name of main or when they're inside a bigger I/O action that we composed with a do block/. We can also use a do block to glue together a few I/O actions and then we can use that I/O action in another do block and so on. *Either way, they'll be performed only if they eventually fall into main* (this really fucks up things).

#+begin_src haskell
import Data.Char

main = do
    putStrLn "What's your first name?"
    -- bind the IO String to a regular String
    firstName <- getLine
    -- bind the IO String to a regular String
    putStrLn "What's your last name?"
    lastName <- getLine
    -- operations using pure functions with pure data type to get another pure data type
    let bigFirstName = map toUpper firstName
        bigLastName = map toUpper lastName
    -- feed the pure data types into another IO function
    putStrLn $ "hey " ++ bigFirstName ++ " " ++ bigLastName ++ ", how are you?"
#+end_src

=<-= is (for now) for performing I/O actions and binding their results to names. =map toUpper firstName=, however, isn't an I/O action. It's a /pure/ expression in Haskell. So use =<-= when you want to bind results of I/O actions to names and you can use let bindings to bind pure expressions to names. Had we done something like =let firstName = getLine=, we would have just called the =getLine= I/O action a different name and we'd still have to run it through a =<-= to perform it.

*The return in Haskell is really nothing like the return in most other languages*. In Haskell (in I/O actions specifically), it makes an I/O action out of a pure value. If you think about the box analogy from before, it takes a value and wraps it up in a box. The resulting I/O action doesn't actually do anything, it just has that value encapsulated as its result. So in an I/O context, =return "haha"= will have a type of =IO String=, because we needed some I/O action to carry out in the case of an empty input line. That's why we just made a bogus I/O action that doesn't do anything by writing =return ()=. (so, is it like =yield= for I/O?...) Using =return= doesn't cause the I/O do block to end in execution or anything like that.

=print= takes a value of any type that's an instance of =Show= (meaning that we know how to represent it as a string), calls =show= with that value to stringify it and then outputs that string to the terminal. Basically, it's just =putStrLn . show=. It first runs =show= on a value and then feeds that to =putStrLn=, which returns an I/O action that will print out our value.

The =when= function is found in =Control.Monad= (to get access to it, do =import Control.Monad=). It's interesting because in a do block it looks like a control flow statement, but it's actually a normal function. It takes a boolean value and an I/O action if that boolean value is =True=, it returns the same I/O action that we supplied to it. However, if it's =False=, it returns the =return ()= action, so an I/O action that doesn't do anything.

#+begin_src haskell
import Control.Monad

main = do
    c <- getChar
    when (c /= ' ') $ do
        putChar c
        main
#+end_src

#+begin_src haskell
import Control.Monad

main = do
    -- forM get a list of IO (Monad) types of data.
    -- We can also use =mapM=. =forM= is for readability. It puts the function in the end of the block
    -- Note that =forM= expects ONE anonymous function, that's why another =do= is here to chain multiple IO commands
    colors <- forM [1,2,3,4] (\a -> do
        putStrLn $ "Which color do you associate with the number " ++ show a ++ "?"
        color <- getLine
        -- return change the pure data type into an IO type
        return color)
    putStrLn "The colors that you associate with 1, 2, 3 and 4 are: "
    mapM putStrLn colors
#+end_src

I/O actions are values much like any other value in Haskell. We can pass them as parameters to functions and functions can return I/O actions as results. What's special about them is that if they fall into the main function (or are the result in a GHCI line), they are performed. Each I/O action can also encapsulate a result with which it tells you what it got from the real world.

** File and Streams

   #+begin_src haskell
main = interact $ unlines . filter ((<10) . length) . lines
   #+end_src

=interact= can be used to make programs that are piped some contents into them and then dump some result out or it can be used to make programs that appear to take a line of input from the user, give back some result based on that line and then take another line and so on. There isn't actually a real distinction between the two, it just depends on how the user is supposed to use them. (It feels really like a saver - as long as the concatenated function has a signature of =String -> String=, it can be used with the =interact=. As a result, the heavy-lifting operations can all be positioned in a purely functional environment.)

=hGetContents= takes a =Handle=, so it knows which file to get the contents from and returns an =IO String= â€” an I/O action that holds as its result the contents of the file. This function is pretty much like =getContents=. The only difference is that =getContents= will automatically read from the standard input (that is from the terminal), whereas =hGetContents= takes a file handle which tells it which file to read from. In all other respects, they work the same. And just like =getContents=, =hGetContents= won't attempt to read the file at once and store it in memory, but it will read it as needed. That's really cool because we can treat contents as the whole contents of the file, but it's not really loaded in memory. So if this were a really huge file, doing =hGetContents= wouldn't choke up our memory, but it would read only what it needed to from the file, when it needed to.

We can also use =hFlush=, which is a function that takes a handle and returns an I/O action that will flush the buffer of the file associated with the handle. When we're doing line-buffering, the buffer is flushed after every line. When we're doing block-buffering, it's after we've read a chunk. It's also flushed after closing a handle. That means that when we've reached a newline character, the reading (or writing) mechanism reports all the data so far. But we can use =hFlush= to force that reporting of data that has been read so far. After flushing, the data is available to other programs that are running at the same time.

*Haskell is a pure functional language. What that means is that it has referential transparency. What THAT means is that a function, if given the same parameters twice, must produce the same result twice*. That's really cool because /it allows us to reason differently about programs and it enables us to defer evaluation until we really need it/. However, this makes it a bit tricky for getting random numbers.

/Haskell's laziness allows us to exchange the for and while loops of other languages for filtering and mapping over lists, because evaluation will only happen once it really needs to, so things like infinite lists (and even infinite lists of infinite lists!) are no problem for us/. That's why lists can also be used to represent streams, either when reading from the standard input or when reading from files. We can just open a file and read it as a string, even though it will only be accessed when the need arises.

/Whenever you need better performance in a program that reads a lot of data into strings, give bytestrings a try, chances are you'll get some good performance boosts with very little effort on your part. I usually write programs by using normal strings and then convert them to use bytestrings if the performance is not satisfactory./

Haskell has a very good type system. Algebraic data types allow for types like =Maybe= and =Either= and we can use values of those types to represent results that may be there or not. In C, returning, say, -1 on failure is completely a matter of convention. It only has special meaning to humans. If we're not careful, we might treat these abnormal values as ordinary ones and then they can cause havoc and dismay in our code. Haskell's type system gives us some much-needed safety in that aspect. A function =a -> Maybe b= clearly indicates that it it may produce a =b= wrapped in =Just= or that it may return =Nothing=. The type is different from just plain =a -> b= and if we try to use those two functions interchangeably, the compiler will complain at us.

** Command line arguments

   #+begin_src haskell
import System.Environment
import Data.List

main = do
   args <- getArgs
   progName <- getProgName
   putStrLn "The arguments are:"
   -- the loop can be achieved by either recursion or map/filter
   -- in this case, mapM is the map for the IO operations
   mapM putStrLn args
   putStrLn "The program name is:"
   putStrLn progName
   #+end_src

** Exceptions

Despite having expressive types that support failed computations, Haskell still has support for exceptions, because they make more sense in I/O contexts. A lot of things can go wrong when dealing with the outside world because it is so unreliable.

Earlier, we talked about how we should spend as little time as possible in the I/O part of our program. /The logic of our program should reside mostly within our pure functions, because their results are dependant only on the parameters that the functions are called with/. *When dealing with pure functions, you only have to think about what a function returns, because it can't do anything else*. This makes your life easier. Even though doing some logic in I/O is necessary (like opening files and the like), it should preferably be kept to a minimum. *Pure functions are lazy by default, which means that we don't know when they will be evaluated and that it really shouldn't matter*. However, /once pure functions start throwing exceptions, it matters when they are evaluated. That's why we can only catch exceptions thrown from pure functions in the I/O part of our code/. And that's bad, because we want to keep the I/O part as small as possible. However, if we don't catch them in the I/O part of our code, our program crashes. The solution? *Don't mix exceptions and pure code. Take advantage of Haskell's powerful type system and use types like =Either= and =Maybe= to represent results that may have failed*.
