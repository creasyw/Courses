* Functions

/Function application (calling a function by putting a space after it and then typing out the parameters) has the highest precedence of them all/. What that means for us is that these two statements are equivalent. Besides, it is a very simple example of a common pattern you will see throughout Haskell - *making basic functions that are obviously correct and then combining them into more complex functions*. This way you also avoid repetition. /Functions in Haskell don't have to be in any particular order/, so it doesn't matter if you define doubleMe first and then doubleUs or if you do it the other way around.

The difference between Haskell's if statement and if statements in imperative languages is that /the =else= part is mandatory in Haskell/. Another thing about the /=if= statement in Haskell is that it is an expression/. /An expression is basically a piece of code that returns a value/. Because the else is mandatory, /an =if= statement will always return something/ and that's why it's an expression.

Note the ='= at the end of the function name. That apostrophe doesn't have any special meaning in Haskell's syntax. It's a valid character to use in a function name. We usually use ' to either denote a strict version of a function (one that isn't lazy) or a slightly modified version of a function or a variable.

There are *two* noteworthy things about a function - the first is that functions can't begin with uppercase letters. The second thing is that when a function doesn't take any parameters, we usually say it's a definition (or a name). Because we can't change what names (and functions) mean once we've defined them.

* List and tuples

In Haskell, /lists are a *homogenous* data structure/. It stores several elements of the *same* type. That means that we can have a list of integers or a list of characters but we can't have a list that has a few integers and then a few characters.

A common task is putting two lists together. *Watch out when repeatedly using the =++= operator on long strings*. This is done by using the =++= operator. For list concatination, Haskell will walk through the whole list at the left side of the =++=. So, /put the longer one at the right will be a good practice/. Or, use the append operation =:= to put the new element at the head of the original list.

Two lists can be compared! (if the stuff they contain can be compared) The comparison performs in a lexicographical order. If you want to get an element out of a list by index, use =!!=. The indices start at 0. In haskell, =head= and =tail= likes the =car= and =cons= in Racket - the former returns the first item of the list while the latter returns the /list/ without the first item.

In some ways, tuples are like lists â€” they are a way to store several values into a single value. However, there are a few fundamental differences. A list of numbers is a list of numbers. That's its type and it doesn't matter if it has only one number in it or an infinite amount of numbers. Tuples, however, are used when you know exactly how many values you want to combine and its type depends on how many components it has and the types of the components. They are denoted with parentheses and their components are separated by commas. Another key difference is that they don't have to be homogenous. Unlike a list, a tuple can contain a combination of several types.

#+begin_src haskell
ghci> let rightTriangles' = [ (a,b,c) | c <- [1..10], b <- [1..c], a <- [1..b], a^2 + b^2 == c^2, a+b+c == 24]
ghci> rightTriangles'
[(6,8,10)]
#+end_src

- this is just so cool! It has nested loops and conditions in a single list comprehension.
