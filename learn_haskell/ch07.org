* Modules

  #+begin_quote
At the beginning of this chapter, it introduces the module =Data.List=. I might have to continuously return to this chapter, since most of the data manipulations are based on the list.
  #+end_quote

A Haskell module is a collection of related functions, types and typeclasses. A Haskell program is a collection of modules where the main module loads up the other modules and then uses the functions defined in them to do something. Having code split up into several modules has quite a lot of advantages. If a module is generic enough, the functions it exports can be used in a multitude of different programs. If your own code is separated into self-contained modules which don't rely on each other too much (we also say they are loosely coupled), you can reuse them later on. It makes the whole deal of writing code more manageable by having it split into several parts, each of which has some sort of purpose.

When you do import =Data.List=, all the functions that Data.List exports become available in the global namespace, meaning that you can call them from wherever in the script. To avoid name clashes, one can

1. Only import the functions that are needed =import Data.List (nub, sort)=
2. Exclude the functions that are not necessary or have clashed names =import Data.List hiding (nub)=
3. Require the import path in the script =import qualified Data.Map=, or =import qualified Data.Map as M=.

The last option makes it so that if we want to reference =Data.Map= 's =filter= function, we have to do =Data.Map.filter=, whereas just filter still refers to the normal filter we all know and love. (I'd prefer the 3rd option, but not so much for name clashes. It is rather for readability and maintainability - it is much easier to identify all functions that relates to one specific import.)

In the following example, the "equal" has the same effect as =\x y -> (x > 0) && (y > 0) || (x <= 0) && (y <= 0)=, although the way in the example is more readable. An even clearer way to write equality functions for the By functions is if you import the =on= function from =Data.Function=.

Use [[https://downloads.haskell.org/~ghc/latest/docs/html/libraries/][this handy reference]] to see which modules are in the standard library. To search for functions or to find out where they're located, use [[https://hoogle.haskell.org/][Hoogle]]. It's a really awesome Haskell search engine, you can search by name, module name or even type signature.

A great way to pick up new Haskell knowledge is to just click through the standard library reference and explore the modules and their functions. You can also view the Haskell source code for each module. Reading the source code of some modules is a really good way to learn Haskell and get a solid feel for it. -- To search for functions or to find out where they're located, use Hoogle.

  #+begin_src haskell
ghci> let values = [-4.3, -2.4, -1.2, 0.4, 2.3, 5.9, 10.5, 29.1, 5.3, -2.4, -14.5, 2.9, 2.3]
ghci> groupBy (\x y -> (x > 0) == (y > 0)) values
[[-4.3,-2.4,-1.2],[0.4,2.3,5.9,10.5,29.1,5.3],[-2.4,-14.5],[2.9,2.3]]
-- A even better solution is:
ghci> groupBy ((==) `on` (> 0)) values
[[-4.3,-2.4,-1.2],[0.4,2.3,5.9,10.5,29.1,5.3],[-2.4,-14.5],[2.9,2.3]]
  #+end_src



Almost every programming language enables you to split your code up into several files and Haskell is no different. /When making programs, it's good practice to take functions and types that work towards a similar purpose and put them in a module/. That way, you can easily reuse those functions in other programs by just importing your module.

At the beginning of a module, we specify the module name. Then, we specify the functions that it exports and after that, we can start writing the functions. (It is like defining the interface up from)

#+begin_src haskell
module Geometry
( sphereVolume
, sphereArea
, cubeVolume
, cubeArea
, cuboidArea
, cuboidVolume
) where
#+end_src

When making a module, we usually /export only those functions that act as a sort of interface to our module so that the implementation is hidden/. Modules can also be given a hierarchical structures. Each module can have a number of sub-modules and they can have sub-modules of their own.

The next time you find yourself writing a file that's really big and has a lot of functions, try to see which functions serve some common purpose and then see if you can put them in their own module. You'll be able to just import your module the next time you're writing a program that requires some of the same functionality.

** [[http://stackoverflow.com/questions/18808258/what-does-the-just-syntax-mean-in-haskell][Explain =Just=, =Nothing=, and =Maybe=]]

It's actually just a normal type constructor that happens to be defined in the *Prelude*, which is the standard library that is imported automatically into every module.

The definition looks something like this:

#+begin_src haskell
data Maybe a = Just a | Nothing
#+end_src

That declaration defines a type, =Maybe a=, which is parameterized by a type variable =a=, which just means that you can use it with any type in place of =a=.

*** Constructing and Destructing

The type has two constructors, =Just a= and =Nothing=. When a type has multiple constructors, it means that a value of the type must have been constructed with just one of the possible constructors. For this type, a value was either constructed via =Just= or =Nothing=, there are no other (non-error) possibilities.

Since =Nothing= has no parameter type, when it's used as a constructor it names a constant value that is a member of type =Maybe a= for all types =a=. But the =Just= constructor does have a type parameter, which means that when used as a constructor it acts like a function from type =a= to =Maybe a=, i.e. it has the type =a -> Maybe a=

So, the constructors of a type build a value of that type; the other side of things is when you would like to use that value, and that is where pattern matching comes in to play. Unlike functions, constructors can be used in pattern binding expressions, and this is the way in which you can do *case analysis* of values that belong to types with more than one constructor.

In order to use a =Maybe a= value in a pattern match, you need to provide a pattern for each constructor, like so:

#+begin_src haskell
case maybeVal of
        Nothing   -> "There is nothing!"
                Just val  -> "There is a value, and it is " ++
        (show val)
#+end_src

In that case expression, the first pattern would match if the value was =Nothing=, and the second would match if the value was constructed with =Just=.  If the second one matches, it also binds the name =val= to the parameter that was passed to the =Just= constructor when the value you're matching against was constructed.

*** What =Maybe= Means

Maybe you were already familiar with how this worked; there's not really any magic to =Maybe= values, it's just a normal Haskell Algebraic Data Type (ADT). But it's used quite a bit because it effectively "lifts" or extends a type, such as =Integer= from your example, into a new context in which it has an extra value (=Nothing=) that represents a lack of value! The type system then requires that you check for that extra value before it will let you get at the =Integer= that *might* be there. This prevents a remarkable number of bugs.

Many languages today handle this sort of "no-value" value via NULL references. Tony Hoare, an eminent computer scientist (he invented Quicksort and is a Turing Award winner), owns up to this as his "[[http://qconlondon.com/london-2009/presentation/Null+References:+The+Billion+Dollar+Mistake][billion dollar mistake]]". The =Maybe= type is not the only way to fix this, but it has proven to be an effective way to do it.

*** =Maybe= as a Functor

The idea of transforming one type to another one such that operations on the old type can *also* be transformed to work on the new type is the concept behind the Haskell type class called =Functor=, which =Maybe a= has a useful instance of.

=Functor= provides a method called =fmap=, which maps functions that range over values from the base type (such as =Integer=) to functions that range over values from the lifted type (such as =Maybe Integer=). A function transformed with =fmap= to work on a =Maybe= value works like this:

#+begin_src haskell
case maybeVal of
      Nothing  -> Nothing               -- there is nothing, so just
      return Nothing
            Just val -> Just (f val)    -- there is a value, so
      apply the function to it
#+end_src

So if you have a =Maybe Integer= value =m_x= and an =Int -> Int= function =f=, you can do =fmap f m_x= to apply the function =f= directly to the =Maybe Integer= without worrying if it's actually got a value or not. In fact, you could apply a whole chain of lifted =Integer -> Integer= functions to =Maybe Integer= values and only have to worry about explicitly checking for =Nothing= once when you're finished.

*** Maybe as a Monad

I'm not sure how familiar you are with the concept of a =Monad= yet, but you have at least used =IO a= before, and the type signature =IO a= looks remarkably similar to =Maybe a=. Although =IO= is special in that it doesn't expose its constructors to you and can thus only be "run" by the Haskell runtime system, it's still also a =Functor= in addition to being a =Monad=.  In fact, there's an important sense in which a =Monad= is just a special kind of =Functor= with some extra features, but this isn't the place to get into that.

Anyway, Monads like =IO= map types to new types that represent "computations that result in values" and you can lift functions into =Monad= types via a very =fmap=-like function called   =liftM= that turns a regular function into a "computation that results in the value obtained by evaluating the function."

You have probably guessed (if you have read this far) that =Maybe= is also a =Monad=. It represents "computations that could fail to return a value". Just like with the =fmap= example, this lets you do a whole bunch of computations without having to explicitly check for errors after each step. And in fact, the way the =Monad= instance is constructed, a computation on =Maybe= values *stops* as soon as a =Nothing= is encountered, so it's kind of like an immediate abort or a valueless return in the middle of a computation.
