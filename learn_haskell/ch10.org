* Functionally Solving Problems

It really helps to first think what the type declaration of a function should be before concerning ourselves with the implementation and then write it down. In Haskell, a function's type declaration tells us a whole lot about the function, due to the very strong type system.

we're going to solve a problem in three steps:

1. Forget Haskell for a minute and think about /how we'd solve the problem by hand/
2. Think about /how we're going to represent our data/ in Haskell
3. Figure out /how to operate on that data/ in Haskell so that we produce at a solution

#+begin_src haskell
data Section = Section { getA :: Int, getB :: Int, getC :: Int } deriving (Show)
type RoadSystem = [Section]
#+end_src

We could also use a triple of =(Int, Int, Int)= to represent a road section. Using tuples instead of making your own algebraic data types is good for some small localized stuff, but it's usually better to make a new type for things like this. It gives the type system more information about what's what. We can use =(Int, Int, Int)= to represent a road section or a vector in 3D space and we can operate on those two, but that allows us to mix them up. If we use Section and Vector data types, then we can't accidentally add a vector to a section of a road system.

If you get stack overflows, try using =foldl'= instead of =foldl=, because =foldl'= is strict.
