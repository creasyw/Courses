* Types and Typeclasses

Haskell has a /static/ type system. /The type of every expression is known at compile time/, which leads to safer code. Furthermore, Haskell has type inference. A type is a kind of label that every expression has. It tells us in which category of things that expression fits.

Functions also have types. When writing our own functions, /we can choose to give them an explicit type declaration. This is generally considered to be good practice except when writing very short functions/.

=Int= and =Integer= both stand for the type of integers. The difference is that the latter one is /not bounded/.

Here's a simple function that takes three integers and adds them together:

#+begin_src haskell
addThree :: Int -> Int -> Int -> Int
addThree x y z = x + y + z
#+end_src

This signature makes it possible to /partially/ apply input parameters to a function and use it to generate new functions.

#+begin_src haskell
ghci> :t head
head :: [a] -> a
#+end_src

Because it's not in capital case it's actually a *type variable*. That means that a can be of any type. This is much like *generics* in other languages, only in Haskell it's much more powerful because it allows us to easily write very general functions if they don't use any specific behavior of the types in them. Functions that have type variables are called *polymorphic functions*. The type declaration of =head= states that it takes a list of any type and returns one element of that type.

*A typeclass can be regarded as an interface that defines some behavior*. If a type is a part of a typeclass, that means that it supports and implements the behavior the typeclass describes. (it is the exactly what an interface does in Golang - it has contract on the behavior of the data that a function receives or generates.) However, it /feels/ like a wider implication. For example,

#+begin_src haskell
ghci> :t (==)
(==) :: (Eq a) => a -> a -> Bool
#+end_src

Everything before the ==>= symbol is called a *class constraint*. We can read the previous type declaration like this: the equality function takes any two values that are of the same type and returns a Bool. The type of those two values must be a member of the Eq class (this was the class constraint).

#+begin_src haskell
Prelude> :t read
read :: Read a => String -> a
Prelude> read "4" + 0
4
Prelude> read "4"
--- Exception: Prelude.read: no parse
Prelude>
Prelude> read "4" :: Int
4
#+end_src

The signature of =read=  can generate a typeclass, which if there is no other operation (e.g. =+0=) to help the compiler /infers/ its type, the compilation fails unless we tell it explicitly about the type.

Most expressions are such that the compiler can infer what their type is by itself. But sometimes, the compiler doesn't know whether to return a value of type Int or Float for an expression like read "5". To see what the type is, Haskell would have to actually evaluate read "5". But since Haskell is a statically typed language, it has to know all the types before the code is compiled (or in the case of GHCI, evaluated). So we have to tell Haskell: "Hey, this expression should have this type, in case you don't know!".

=Num= is a numeric typeclass. Its members have the property of being able to act like numbers. Let's examine the type of a number.

=Integral= is also a numeric typeclass. =Num= includes all numbers, including real numbers and integral numbers, =Integral= includes only integral (whole) numbers. In this typeclass are =Int= and =Integer=.

=Floating= includes only floating point numbers, so =Float= and =Double=.

A very useful function for dealing with numbers is =fromIntegral=. It has a type declaration of =fromIntegral :: (Num b, Integral a) => a -> b=. From its type signature we see that it takes an integral number and turns it into a more general number. That's useful when you want integral and floating point types to work together nicely. Notice that fromIntegral has several class constraints in its type signature. That's completely valid and as you can see, the class constraints are separated by commas inside the parentheses.
